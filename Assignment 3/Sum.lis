     1                                  ;****************************************************************************************************************************
     2                                  ;Program name: "sumArray".  This program demonstrates the input of float numbers into an array from the standard input       *
     3                                  ;device utilizing those values to obtain the sum of float numbers in the array                                               *
     4                                  ; Copyright (C) 2021 Albert Truong.                                                                                   *
     5                                  ;                                                                                                                     *
     6                                  ;This file is part of the software program "sumArray".                                                                *
     7                                  ;sumArray is free software: you can redistribute it and/or modify it under the terms of the GNU General Public        *
     8                                  ;License version 3 as published by the Free Software Foundation.                                                      *
     9                                  ;sumArray is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied       *
    10                                  ;warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.     *
    11                                  ;A copy of the GNU General Public License v3 is available here:  <https:;www.gnu.org/licenses/>.                            *
    12                                  ;****************************************************************************************************************************
    13                                  
    14                                  
    15                                  ;=======1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    16                                  ;
    17                                  ;Author information
    18                                  ;  Author name: Albert Truong
    19                                  ;  Author email: atruong811@fullerton.edu
    20                                  ;
    21                                  ;Program information
    22                                  ;  Program name: sumArray
    23                                  ;  Programming languages: One modules in C, One modules in C++ and three module in X86
    24                                  ;  Date program began: 2021-March-10
    25                                  ;  Date of last update: 2021-March-21
    26                                  ;  Date of reorganization of comments: 2021-March-21
    27                                  ;  Files in this program: Main.c, Control.asm, Fill.asm,  Sum.asm, Display.cpp
    28                                  ;  Status: Finished.  The program was tested extensively with no errors in Ubuntu20.04 LTS on Windows 10 utilizing WSL.
    29                                  ;
    30                                  ;Purpose
    31                                  ;  User input float values into an array. Those values would be of the array would be added up and the sum value would be
    32                                  ;  returned to the main. 
    33                                  ;
    34                                  ;This file
    35                                  ;   File name: Sum.asm
    36                                  ;   Language: X86 with Intel syntax.
    37                                  ;   Max page width: 132 columns
    38                                  ;   Assemble: nasm -f elf64 -l Sum.lis -o Sum.o Sum.asm
    39                                  ;
    40                                  ;=======1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    41                                  ;
    42                                  ;
    43                                  ;===== Begin code area ===========================================================================================================
    44                                  extern printf
    45                                  extern scanf
    46                                  
    47                                  global Sum
    48                                  
    49                                  segment .data
    50 00000000 257300                  input1 db "%s",0
    51 00000003 54657374206F757470-     test1 db "Test output %7.6lf.", 10,0
    51 0000000C 75742025372E366C66-
    51 00000015 2E0A00             
    52 00000018 54657374206F757470-     test2 db "Test output", 10,0
    52 00000021 75740A00           
    53 00000025 256C660A00              output2 db "%lf",10,0
    54                                  
    55                                  segment .bss  ;Reserved for uninitialized data
    56                                  
    57                                  segment .text ;Reserved for executing instructions.
    58                                  
    59                                  Sum:
    60                                  
    61                                  ;Prolog ===== Insurance for any caller of this assembly module ========================================================
    62                                  ;Any future program calling this module that the data in the caller's GPRs will not be modified.
    63 00000000 55                      push rbp
    64 00000001 4889E5                  mov  rbp,rsp
    65 00000004 57                      push rdi                                                    ;Backup rdi
    66 00000005 56                      push rsi                                                    ;Backup rsi
    67 00000006 52                      push rdx                                                    ;Backup rdx
    68 00000007 51                      push rcx                                                    ;Backup rcx
    69 00000008 4150                    push r8                                                     ;Backup r8
    70 0000000A 4151                    push r9                                                     ;Backup r9
    71 0000000C 4152                    push r10                                                    ;Backup r10
    72 0000000E 4153                    push r11                                                    ;Backup r11
    73 00000010 4154                    push r12                                                    ;Backup r12
    74 00000012 4155                    push r13                                                    ;Backup r13
    75 00000014 4156                    push r14                                                    ;Backup r14
    76 00000016 4157                    push r15                                                    ;Backup r15
    77 00000018 53                      push rbx                                                    ;Backup rbx
    78 00000019 9C                      pushf                                                       ;Backup rflags
    79                                  
    80                                  
    81 0000001A 6A00                    push qword 0                           
    82                                  
    83                                  ;-----------------------------Initialize Parameters-----------------------------------------
    84 0000001C 4989FF                  mov r15, rdi                            ; Copies array that was passed to r15.
    85 0000001F 4989F6                  mov r14, rsi                            ; Copies number of elements in the array to r14.
    86 00000022 41BD00000000            mov r13, 0                              ; Sum register to add elements of array to.
    87 00000028 41BC00000000            mov r12, 0                              ; Counter to to iterate through array.
    88                                  
    89 0000002E B800000000              mov rax, 0                     
    90 00000033 58                      pop rax
    91                                  ;-----------------------------------Loop Start----------------------------------------------
    92                                  loopStart:
    93                                  ; Compares the counter (r12) to the number of elements in the array (r14).
    94 00000034 4D39F4                  cmp r12, r14                        
    95 00000037 7D0B                    jge loopEnd             ;If r12 equals r14, jumps to loopEnd
    96                                  
    97                                  ;--------------------------------Add up values--------------------------------------------
    98 00000039 F2470F5814E7            addsd xmm10, [r15 + 8 * r12]            ; Adds element of array at index of r12 to xmm10.
    99 0000003F 49FFC4                  inc r12                                 ; Increments counter r12 by 1.
   100                                  
   101                                  ; Restarts loop
   102 00000042 EBF0                    jmp loopStart          
   103                                  
   104                                  ;----------------------------------END OF LOOP----------------------------------------------
   105                                  loopEnd:
   106                                  ;movsd xmm0, xmm10                      
   107 00000044 F2450F10DA              movsd xmm11,xmm10                      ;Save Xmm10 Values into xmm11
   108                                  
   109                                  
   110                                  ;===== Restore original values to integer registers ===================================================================
   111 00000049 9D                      popf                                                        ;Restore rflags
   112 0000004A 5B                      pop rbx                                                     ;Restore rbx
   113 0000004B 415F                    pop r15                                                     ;Restore r15
   114 0000004D 415E                    pop r14                                                     ;Restore r14
   115 0000004F 415D                    pop r13                                                     ;Restore r13
   116 00000051 415C                    pop r12                                                     ;Restore r12
   117 00000053 415B                    pop r11                                                     ;Restore r11
   118 00000055 415A                    pop r10                                                     ;Restore r10
   119 00000057 4159                    pop r9                                                      ;Restore r9
   120 00000059 4158                    pop r8                                                      ;Restore r8
   121 0000005B 59                      pop rcx                                                     ;Restore rcx
   122 0000005C 5A                      pop rdx                                                     ;Restore rdx
   123 0000005D 5E                      pop rsi                                                     ;Restore rsi
   124 0000005E 5F                      pop rdi                                                     ;Restore rdi
   125 0000005F 5D                      pop rbp                                                     ;Restore rbp
   126                                  
   127 00000060 C3                      ret
   128                                  
   129                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
