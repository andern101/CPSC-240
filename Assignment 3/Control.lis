     1                                  ;****************************************************************************************************************************
     2                                  ;Program name: "sumArray".  This program demonstrates the input of float numbers into an array from the standard input       *
     3                                  ;device utilizing those values to obtain the sum of float numbers in the array                                               *
     4                                  ; Copyright (C) 2021 Albert Truong.                                                                                   *
     5                                  ;                                                                                                                     *
     6                                  ;This file is part of the software program "sumArray".                                                                *
     7                                  ;sumArray is free software: you can redistribute it and/or modify it under the terms of the GNU General Public        *
     8                                  ;License version 3 as published by the Free Software Foundation.                                                      *
     9                                  ;sumArray is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied       *
    10                                  ;warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.     *
    11                                  ;A copy of the GNU General Public License v3 is available here:  <https:;www.gnu.org/licenses/>.                            *
    12                                  ;****************************************************************************************************************************
    13                                  
    14                                  
    15                                  ;=======1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    16                                  ;
    17                                  ;Author information
    18                                  ;  Author name: Albert Truong
    19                                  ;  Author email: atruong811@fullerton.edu
    20                                  ;
    21                                  ;Program information
    22                                  ;  Program name: sumArray
    23                                  ;  Programming languages: One modules in C, One modules in C++ and three module in X86
    24                                  ;  Date program began: 2021-March-10
    25                                  ;  Date of last update: 2021-March-21
    26                                  ;  Date of reorganization of comments: 2021-March-21
    27                                  ;  Files in this program: Main.c, Control.asm, Fill.asm,  Sum.asm, Display.cpp
    28                                  ;  Status: Finished.  The program was tested extensively with no errors in Ubuntu20.04 LTS on Windows 10 utilizing WSL.
    29                                  ;
    30                                  ;Purpose
    31                                  ;  User input float values into an array. Those values would be of the array would be added up and the sum value would be
    32                                  ;  returned to the main. 
    33                                  ;
    34                                  ;This file
    35                                  ;   File name: Control.asm
    36                                  ;   Language: X86 with Intel syntax.
    37                                  ;   Max page width: 132 columns
    38                                  ;   Assemble: nasm -f elf64 -l Control.lis -o Control.o Control.asm
    39                                  
    40                                  ;
    41                                  ;=======1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    42                                  ;
    43                                  ;
    44                                  ;===== Begin code area ===========================================================================================================
    45                                  extern printf
    46                                  extern scanf
    47                                  extern atof
    48                                  extern Fill
    49                                  extern Sum
    50                                  extern Display
    51                                  
    52                                  
    53                                  arraysize equ 100
    54                                  
    55                                  global sumArray
    56                                  
    57                                  segment .data
    58 00000000 57656C636F6D652074-     welcome db "Welcome to HSAS.  The accuracy and reliability of this program is guaranteed by Albert T",10,0
    58 00000009 6F20485341532E2020-
    58 00000012 546865206163637572-
    58 0000001B 61637920616E642072-
    58 00000024 656C696162696C6974-
    58 0000002D 79206F662074686973-
    58 00000036 2070726F6772616D20-
    58 0000003F 69732067756172616E-
    58 00000048 746565642062792041-
    58 00000051 6C6265727420540A00 
    59 0000005A 546865206E756D6265-     inputprompt db "The numbers you entered are these: ",10,0
    59 00000063 727320796F7520656E-
    59 0000006C 746572656420617265-
    59 00000075 2074686573653A200A-
    59 0000007E 00                 
    60 0000007F 54686520636F6E7472-     good_bye db "The control module will now return the sum to the caller module.",10,0
    60 00000088 6F6C206D6F64756C65-
    60 00000091 2077696C6C206E6F77-
    60 0000009A 2072657475726E2074-
    60 000000A3 68652073756D20746F-
    60 000000AC 207468652063616C6C-
    60 000000B5 6572206D6F64756C65-
    60 000000BE 2E0A00             
    61 000000C1 5468652073756D206F-     output_sum db "The sum of these values is %15.12lf",10,0
    61 000000CA 662074686573652076-
    61 000000D3 616C75657320697320-
    61 000000DC 2531352E31326C660A-
    61 000000E5 00                 
    62 000000E6 2531352E31326C6600      input1 db "%15.12lf",0
    63 000000EF 54657374206F757470-     test1 db "Test output %15.6lf.", 10,0
    63 000000F8 7574202531352E366C-
    63 00000101 662E0A00           
    64 00000105 546573740A00            tester1 db "Test", 10,0
    65                                  
    66                                  segment .bss  ;Reserved for uninitialized data
    67 00000000 <res 00000320>          floatarray: resq 100
    68                                  
    69                                  segment .text ;Reserved for executing instructions.
    70                                  
    71                                  sumArray:
    72                                  
    73                                  ;Prolog ===== Insurance for any caller of this assembly module ========================================================
    74                                  ;Any future program calling this module that the data in the caller's GPRs will not be modified.
    75 00000000 55                      push rbp
    76 00000001 4889E5                  mov  rbp,rsp
    77 00000004 57                      push rdi                                                    ;Backup rdi
    78 00000005 56                      push rsi                                                    ;Backup rsi
    79 00000006 52                      push rdx                                                    ;Backup rdx
    80 00000007 51                      push rcx                                                    ;Backup rcx
    81 00000008 4150                    push r8                                                     ;Backup r8
    82 0000000A 4151                    push r9                                                     ;Backup r9
    83 0000000C 4152                    push r10                                                    ;Backup r10
    84 0000000E 4153                    push r11                                                    ;Backup r11
    85 00000010 4154                    push r12                                                    ;Backup r12
    86 00000012 4155                    push r13                                                    ;Backup r13
    87 00000014 4156                    push r14                                                    ;Backup r14
    88 00000016 4157                    push r15                                                    ;Backup r15
    89 00000018 53                      push rbx                                                    ;Backup rbx
    90 00000019 9C                      pushf                                                       ;Backup rflags
    91                                  
    92                                  ;Registers rax, rip, and rsp are usually not backed up.
    93 0000001A 6A00                    push qword 0
    94                                  
    95                                  
    96                                  ;Display a welcome message to the viewer.
    97 0000001C B800000000              mov rax, 0                     
    98 00000021 48BF-                   mov rdi, welcome               ;""Welcome to HSAS.  The accuracy and reliability of this program is guaranteed by Albert T""
    98 00000023 [0000000000000000] 
    99 0000002B E8(00000000)            call printf
   100 00000030 58                      pop rax
   101                                  
   102                                  ;---------------------------Call Function Fill to input value into array---------------------------------------
   103                                  
   104 00000031 48BF-                   mov rdi, floatarray              ; Passes the floatarray into rdi
   104 00000033 [0000000000000000] 
   105 0000003B BE64000000              mov rsi, arraysize               ; Passes the max array size into rsi register.
   106 00000040 B800000000              mov rax, 0
   107 00000045 E8(00000000)            call Fill                        ; Calls Fill function.
   108 0000004A 4989C6                  mov r14, rax;                    ; Passes # of elements in the array stored in rax to r14.
   109                                  
   110                                  ;---------------------------Display message inputed value to array---------------------------------------
   111 0000004D 48BF-                   mov rdi, inputprompt             ;"The numbers you entered are these: "
   111 0000004F [5A00000000000000] 
   112 00000057 B800000000              mov rax, 0
   113 0000005C E8(00000000)            call printf                             
   114                                  
   115                                  ;----------------------------Display Elements of Array--------------------------------------
   116 00000061 48BF-                   mov rdi, floatarray               ; Passes the array as first parameter into rdi.
   116 00000063 [0000000000000000] 
   117 0000006B 4C89F6                  mov rsi, r14                      ; Passes # of elements in the array stored in r14.
   118 0000006E B800000000              mov rax, 0
   119 00000073 E8(00000000)            call Display                      ; Calls display function.
   120 00000078 58                      pop rax
   121                                  
   122                                  ;-----------------------------------Call Sum Function-----------------------------------------------
   123 00000079 48BF-                   mov rdi, floatarray                 ; Passes the array as first parameter into rdi.
   123 0000007B [0000000000000000] 
   124 00000083 4C89F6                  mov rsi, r14                        ; Passes # of elements in the array stored in r14.
   125 00000086 B800000000              mov rax, 0
   126 0000008B E8(00000000)            call Sum                            ; Calls Sum function.
   127                                  
   128                                  ;--------------------------Prints out the Sum output--------------------------- 
   129 00000090 6A00                    push qword 0
   130 00000092 B801000000              mov rax, 1
   131 00000097 48BF-                   mov rdi, output_sum                 ; "The sum of these values is %15.12lf"
   131 00000099 [C100000000000000] 
   132 000000A1 F2410F10C3              movsd xmm0,xmm11
   133 000000A6 E8(00000000)            call printf                             
   134 000000AB 58                      pop rax
   135                                  
   136                                  ;---------------------------------Starts End Exit-------------------------------------- 
   137 000000AC 6A00                    push qword 0
   138 000000AE B800000000              mov rax, 0
   139 000000B3 48BF-                   mov rdi, good_bye                  ;"The control module will now return the sum to the caller module."
   139 000000B5 [7F00000000000000] 
   140 000000BD E8(00000000)            call printf                             
   141                                  
   142 000000C2 F2410F10C3              movsd xmm0,xmm11                   ;Return Sum Value
   143                                  ;===== Restore original values to integer registers ===================================================================
   144 000000C7 9D                      popf                                                        ;Restore rflags
   145 000000C8 5B                      pop rbx                                                     ;Restore rbx
   146 000000C9 415F                    pop r15                                                     ;Restore r15
   147 000000CB 415E                    pop r14                                                     ;Restore r14
   148 000000CD 415D                    pop r13                                                     ;Restore r13
   149 000000CF 415C                    pop r12                                                     ;Restore r12
   150 000000D1 415B                    pop r11                                                     ;Restore r11
   151 000000D3 415A                    pop r10                                                     ;Restore r10
   152 000000D5 4159                    pop r9                                                      ;Restore r9
   153 000000D7 4158                    pop r8                                                      ;Restore r8
   154 000000D9 59                      pop rcx                                                     ;Restore rcx
   155 000000DA 5A                      pop rdx                                                     ;Restore rdx
   156 000000DB 5E                      pop rsi                                                     ;Restore rsi
   157 000000DC 5F                      pop rdi                                                     ;Restore rdi
   158 000000DD 5D                      pop rbp                                                     ;Restore rbp
   159                                  
   160 000000DE C3                      ret
   161                                  
   162                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
