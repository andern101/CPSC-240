     1                                  ;****************************************************************************************************************************
     2                                  ;Program name: "Rectangle Area".  This program demonstrates the input of multiple float numbers from the standard input     *
     3                                  ;device using a single instruction and the output of the perimeter and the average size length                              *
     4                                  ; Copyright (C) 2021 Albert Truong.                                                                                         *
     5                                  ;                                                                                                                           *
     6                                  ;This file is part of the software program "Rectangle Area".                                                                *
     7                                  ;Rectangle Area is free software: you can redistribute it and/or modify it under the terms of the GNU General Public        *
     8                                  ;License version 3 as published by the Free Software Foundation.                                                            *
     9                                  ;Rectangle Area is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied       *
    10                                  ;warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.     *
    11                                  ;A copy of the GNU General Public License v3 is available here:  <https:;www.gnu.org/licenses/>.                            *
    12                                  ;****************************************************************************************************************************
    13                                  
    14                                  ;/=======1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    15                                  ;
    16                                  ;Author information
    17                                  ;Author name: Albert Truong
    18                                  ;Author email: atruong811@fullerton.edu
    19                                  ;
    20                                  ;Program information
    21                                  ;  Program name: Rectangle Area
    22                                  ;  Programming languages: One modules in C++ and one module in X86
    23                                  ;  Date program began: 2021-Jan-25
    24                                  ;  Date of last update: 2021-Feb-13
    25                                  ;  Date of reorganization of comments: 2021-Feb-13
    26                                  ;  Files in this program: rectangle.cpp, perimeter.asm
    27                                  ;  Status: Finished.  The program was tested extensively with no errors in Ubuntu20.04 LTS on Windows 10 utilizing WSL.
    28                                  ;
    29                                  ;Purpose
    30                                  ;  Show how to input height and length side floating point (64-bit) numbers and output the perimeter and avg. length side.
    31                                  ;
    32                                  ;This file
    33                                  ;   File name: perimeter.asm
    34                                  ;   Language: X86 with Intel syntax.
    35                                  ;   Max page width: 132 columns
    36                                  ;   Assemble: nasm -f elf64 -l perimeter.lis -o perimeter.o perimeter.asm
    37                                  
    38                                  
    39                                  ;===== Begin code area ================================================================================================
    40                                  extern printf
    41                                  extern scanf
    42                                  global rectangleArea
    43                                  
    44                                  segment .data
    45 00000000 546869732070726F67-     welcome db "This program will compute the perimeter and the average side length of a rectangle",10,0
    45 00000009 72616D2077696C6C20-
    45 00000012 636F6D707574652074-
    45 0000001B 686520706572696D65-
    45 00000024 74657220616E642074-
    45 0000002D 686520617665726167-
    45 00000036 652073696465206C65-
    45 0000003F 6E677468206F662061-
    45 00000048 2072656374616E676C-
    45 00000051 650A00             
    46 00000054 506C6561736520656E-     heightprompt db "Please enter the height: ",0
    46 0000005D 746572207468652068-
    46 00000066 65696768743A2000   
    47 0000006E 506C6561736520656E-     widthprompt db "Please enter the width: ",0
    47 00000077 746572207468652077-
    47 00000080 696474683A2000     
    48 00000087 54686520506572696D-     perimeter db "The Perimeter is: %5.3lf",10,0
    48 00000090 657465722069733A20-
    48 00000099 25352E336C660A00   
    49 000000A1 256C6600                height1 db "%lf",0
    50 000000A5 256C6600                width1 db "%lf",0
    51 000000A9 546865206F6E65206E-     output_one_float db "The one number is %5.3lf",10,0
    51 000000B2 756D62657220697320-
    51 000000BB 25352E336C660A00   
    52 000000C3 546865206C656E6774-     avglengthinput db "The length offset the average side is: %5.3lf",10,0
    52 000000CC 68206F666673657420-
    52 000000D5 746865206176657261-
    52 000000DE 676520736964652069-
    52 000000E7 733A2025352E336C66-
    52 000000F0 0A00               
    53 000000F2 256C6600                avglength db "%lf",0
    54 000000F6 54686520617373656D-     good_bye db "The assembly program will send the perimeter to the main",10,0
    54 000000FF 626C792070726F6772-
    54 00000108 616D2077696C6C2073-
    54 00000111 656E64207468652070-
    54 0000011A 6572696D6574657220-
    54 00000123 746F20746865206D61-
    54 0000012C 696E0A00           
    55 00000130 256C6600                height db "%lf",0
    56 00000134 256C6600                width db "%lf",0
    57                                  
    58                                  segment .bss  ;Reserved for uninitialized data
    59                                  
    60                                  segment .text ;Reserved for executing instructions.
    61                                  
    62                                  rectangleArea:
    63                                  
    64                                  ;Prolog ===== Insurance for any caller of this assembly module ========================================================
    65                                  ;Any future program calling this module that the data in the caller's GPRs will not be modified.
    66 00000000 55                      push rbp
    67 00000001 4889E5                  mov  rbp,rsp
    68 00000004 57                      push rdi                                                    ;Backup rdi
    69 00000005 56                      push rsi                                                    ;Backup rsi
    70 00000006 52                      push rdx                                                    ;Backup rdx
    71 00000007 51                      push rcx                                                    ;Backup rcx
    72 00000008 4150                    push r8                                                     ;Backup r8
    73 0000000A 4151                    push r9                                                     ;Backup r9
    74 0000000C 4152                    push r10                                                    ;Backup r10
    75 0000000E 4153                    push r11                                                    ;Backup r11
    76 00000010 4154                    push r12                                                    ;Backup r12
    77 00000012 4155                    push r13                                                    ;Backup r13
    78 00000014 4156                    push r14                                                    ;Backup r14
    79 00000016 4157                    push r15                                                    ;Backup r15
    80 00000018 53                      push rbx                                                    ;Backup rbx
    81 00000019 9C                      pushf                                                       ;Backup rflags
    82                                  
    83                                  ;Registers rax, rip, and rsp are usually not backed up.
    84 0000001A 6A00                    push qword 0
    85                                  
    86                                  
    87                                  ;Display a welcome message to the viewer.
    88 0000001C B800000000              mov rax, 0                     ;A zero in rax means printf uses no data from xmm registers.
    89 00000021 48BF-                   mov rdi, welcome               ;"This program will compute the perimeter and the average side length of a rectangle"
    89 00000023 [0000000000000000] 
    90 0000002B E8(00000000)            call printf
    91                                  
    92                                  
    93                                  ;============= Begin section to input exactly one float number ========================================================
    94                                  
    95 00000030 6A00                    push qword 0
    96                                  ;Display a prompt message asking for height
    97 00000032 B800000000              mov rax, 0
    98 00000037 48BF-                   mov rdi, heightprompt          ;"Please enter the height:  "
    98 00000039 [5400000000000000] 
    99 00000041 E8(00000000)            call printf
   100 00000046 58                      pop rax
   101                                  
   102                                  ;begin scan block for height
   103 00000047 6A00                    push qword 0
   104 00000049 B800000000              mov rax, 0
   105 0000004E 48BF-                   mov rdi, height1
   105 00000050 [A100000000000000] 
   106 00000058 4889E6                  mov rsi, rsp
   107 0000005B E8(00000000)            call scanf
   108 00000060 F2440F101424            movsd xmm10, [rsp]
   109 00000066 58                      pop rax
   110                                  
   111                                  ;Display a prompt message asking for width
   112 00000067 6A00                    push qword 0
   113 00000069 B800000000              mov rax, 0
   114 0000006E 48BF-                   mov rdi, widthprompt          ;"Please enter the width: "
   114 00000070 [6E00000000000000] 
   115 00000078 E8(00000000)            call printf
   116 0000007D 58                      pop rax
   117                                  
   118                                  ;begin scan block for width
   119 0000007E 6A00                    push qword 0
   120 00000080 B801000000              mov rax, 1
   121 00000085 48BF-                   mov rdi, width1
   121 00000087 [A500000000000000] 
   122 0000008F 4889E6                  mov rsi, rsp
   123 00000092 E8(00000000)            call scanf
   124 00000097 F2440F101C24            movsd xmm11, [rsp]
   125 0000009D 58                      pop rax
   126                                  
   127                                  ;============= End of section to input one float number ===============================================================
   128                                  
   129                                  ;============= Perimeter Calculation =======================================
   130                                  ;Add Width and Height to register xmm12
   131 0000009E 6A00                    push qword 0
   132 000000A0 F2450F10E2              movsd xmm12,xmm10
   133 000000A5 F2450F58E2              addsd xmm12,xmm10
   134 000000AA F2450F58E3              addsd xmm12,xmm11
   135 000000AF F2450F58E3              addsd xmm12,xmm11
   136 000000B4 58                      pop rax
   137                                  
   138                                  ;Display the perimeter solution
   139 000000B5 6A00                    push qword 0
   140 000000B7 B801000000              mov rax, 1
   141 000000BC 48BF-                   mov rdi,perimeter			; "The Perimeter is: %5.3lf"
   141 000000BE [8700000000000000] 
   142 000000C6 F2410F10C4              movsd xmm0, xmm12
   143 000000CB E8(00000000)            call printf
   144 000000D0 58                      pop rax
   145                                  ;============= End of section to perimeter calculation ==============================================================
   146                                  
   147                                  ;============= Find the Average Length ================================
   148                                  ;Convert Int 4 to Floating Point Num
   149 000000D1 6A04                    push qword 4
   150 000000D3 F2440F2A2C24            cvtsi2sd xmm13, [rsp]
   151                                  
   152                                  ;Divide the perimeter( xmm14 by 4(xmm13) )
   153 000000D9 F2450F10F4              movsd xmm14, xmm12
   154 000000DE F2450F5EF5              divsd xmm14, xmm13
   155 000000E3 58                      pop rax
   156                                  
   157                                  ;Display the Average Length Solution
   158 000000E4 6A00                    push qword 0
   159 000000E6 B801000000              mov rax, 1
   160 000000EB 48BF-                   mov rdi, avglengthinput			;"The length offset the average side is: %5.3lf"
   160 000000ED [C300000000000000] 
   161 000000F5 F2410F10C6              movsd xmm0, xmm14
   162 000000FA E8(00000000)            call printf
   163 000000FF 58                      pop rax
   164 00000100 58                      pop rax
   165                                  ;============= End of the section Find the Average Length ====================================
   166                                  
   167                                  ;============= Prepare to exit from this program ======================================================================
   168                                  
   169                                  ;Display good-bye message (the next block of instructions)
   170 00000101 6A00                    push qword 0
   171 00000103 B800000000              mov rax, 0
   172 00000108 48BF-                   mov rdi, good_bye              ;"The assembly program will send the perimeter to the main"
   172 0000010A [F600000000000000] 
   173 00000112 E8(00000000)            call printf
   174 00000117 58                      pop rax
   175                                  
   176 00000118 F2410F10C4              movsd xmm0, xmm12			;Set the return value to the perimeter (xmm12)
   177                                  
   178                                  ;===== Restore original values to integer registers ===================================================================
   179 0000011D 9D                      popf                                                        ;Restore rflags
   180 0000011E 5B                      pop rbx                                                     ;Restore rbx
   181 0000011F 415F                    pop r15                                                     ;Restore r15
   182 00000121 415E                    pop r14                                                     ;Restore r14
   183 00000123 415D                    pop r13                                                     ;Restore r13
   184 00000125 415C                    pop r12                                                     ;Restore r12
   185 00000127 415B                    pop r11                                                     ;Restore r11
   186 00000129 415A                    pop r10                                                     ;Restore r10
   187 0000012B 4159                    pop r9                                                      ;Restore r9
   188 0000012D 4158                    pop r8                                                      ;Restore r8
   189 0000012F 59                      pop rcx                                                     ;Restore rcx
   190 00000130 5A                      pop rdx                                                     ;Restore rdx
   191 00000131 5E                      pop rsi                                                     ;Restore rsi
   192 00000132 5F                      pop rdi                                                     ;Restore rdi
   193 00000133 5D                      pop rbp                                                     ;Restore rbp
   194                                  
   195 00000134 C3                      ret
   196                                  
   197                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
